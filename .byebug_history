q
n
s
q
tree.type
tree.class
tree.ast
tree
q
c
q
new.type
new
new.type
old.type
old.type == new.type
new.first
old = ast("def foo\nsomething\nend")
new = replace("def foo\n1 + 1\nend", 2..2)
q
tree.type
q
tree.ast
q
self.class.new(type: type, children: new_children, value: value)
children.map(&:ast) == new_children.map(&:ast)
c
new_children.map(&:ast)
children.map(&:ast)
q
tree.ast
q
tree.ast
q
c
tree.ast
q
value
self.class.new(type: type, children: new_children, value: value).value
self.class.new(type: type, children: new_children, value: value).class
self.class.new(type: type, children: new_children, value: value).ast
q
self.class
q
tree.ast
q
tree.ast
q
tree.children[1].children.map(&:ast)
tree.children[1].children
tree.children[1]
tree.children[1].type
tree.children[1].ast
tree.children[0].ast
tree.children
tree.type
tree
tree.ast
c
q
tree.ast
c
n
with.ast
with
n
@replaced
n
tree.lines
s
n
tree.lines
range
n
s
range
tree.children.map(&:lines)
tree.ast
n
s
tree.ast
n
s
tree.type
n
s
c
n
range
tree.ast
tree
n
ast
options
n
tree.ast
n
s
variation.ast
tree.ast
variation
tree.ast
n
s
tree.ast
q
tree.name
tree.class
tree
Parser::CurrentRuby.parse(::File.read(file_name))
::File.read(file_name)
file
tree.ast
q
tree.ast
q
ast.children[2..-1]
ast.children
q
children
self
c
tree
q
self
q
self
q
self
class
q
parent
s
n
s
q
parent.children.first.children.map(&:type)
parent.children.first.childrenmap(&:type)
parent.children.map(&:type)
parent.children
c
n
s
q
c
q
parent
s
extracted_code.children.map(&:parent).select(&:nil?)
extracted_code.children.map(&:parent)
extracted_code.children
extracted_code.class
q
s
n
ast.location.expression
n
ast.location
ast
q
tree.class
tree.children.map { |c| c.parent }
tree.children.map { |c| c.parent.equal?(tree) }
tree.children.map { |c| c.parent.equals?(tree) }
tree
tree.children
q
n
tree
n
s
c
n
s
n
s
q
ast
parent
self
c
parent
children
self
c
children
self
c
q
s
children.first.class
children
q
self
parent
s
extracted_code
c
n
s
q
buffer.content
n
buffer.content
n
buffer.content
n
s
c
buffer.content
buffer
n
klass
n
type
n
node
s
n
buffer
n
node
n
node
n
s
new_tree.ast
new_tree
q
    ")
      end
        puts 'to'
        puts 'stuff'
      def say_something
      end
        puts 'say'
        say_something
        puts 'some'
      def say_some_stuff
Parser::CurrentRuby.parser("
new_tree.ast
c
new_tree.ast
q
new_tree.ast
new_tree
q
file.read
q
tree.children[1].children[0].class
tree.children[1].children[0].ast
tree.children[1].children[0].children[0].ast
tree.children[1].children[0].children[0]
tree.children[1].children[0].children
tree.children[1].children[0].class
tree.children[1].children[0].ast
